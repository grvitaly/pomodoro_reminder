"""init

Revision ID: b8dc4d5a2145
Revises: ba10a6b39d18
Create Date: 2023-07-13 21:54:26.750147

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b8dc4d5a2145"
down_revision = "ba10a6b39d18"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_locationreminder_owner_id", table_name="locationreminder")
    op.drop_table("locationreminder")
    op.drop_index("ix_reminder_owner_id", table_name="reminder")
    op.drop_table("reminder")
    op.drop_table("user")
    op.drop_index("ix_todotask_owner_id", table_name="todotask")
    op.drop_table("todotask")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "todotask",
        sa.Column(
            "date_created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date_last_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("parent_task_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("task_title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "task_description", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "percent_complete", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="todotask_pkey"),
    )
    op.create_index("ix_todotask_owner_id", "todotask", ["owner_id"], unique=False)
    op.create_table(
        "user",
        sa.Column(
            "date_created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date_last_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("user_role", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
    )
    op.create_table(
        "reminder",
        sa.Column(
            "date_created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date_last_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("is_music_on", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "is_music_shuffle", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "current_music_list_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "music_list_song_number", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "position_within_song", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="reminder_pkey"),
    )
    op.create_index("ix_reminder_owner_id", "reminder", ["owner_id"], unique=False)
    op.create_table(
        "locationreminder",
        sa.Column(
            "date_created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date_last_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("is_music_on", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "is_music_shuffle", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "current_music_list_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "music_list_song_number", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "position_within_song", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="locationreminder_pkey"),
    )
    op.create_index(
        "ix_locationreminder_owner_id", "locationreminder", ["owner_id"], unique=False
    )
    # ### end Alembic commands ###
